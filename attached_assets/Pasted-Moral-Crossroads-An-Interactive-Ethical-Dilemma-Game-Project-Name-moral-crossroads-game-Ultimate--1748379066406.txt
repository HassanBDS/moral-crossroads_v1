Moral Crossroads - An Interactive Ethical Dilemma Game
Project Name: moral-crossroads-game
Ultimate Goal: Build a dynamic, visually appealing web application that presents users with a series of interactive ethical dilemmas. The core innovation lies in personalized user interaction (with an optional user-uploaded photo), animated SVG characters, and clear visual feedback for choices and consequences, all powered by a Django backend and a robust JavaScript frontend. The game aims for the artistic simplicity and engaging interactivity of neal.fun, but with a deeper philosophical and personalized touch.
ABSOLUTELY CRITICAL DIRECTIVES & CORE ARCHITECTURE:
Core Interaction (No Trolley, No Tracks): The game's central interaction revolves around two prominent buttons (or more, later) representing choices. There are no "trolleys," "levels" (in the sense of physical environments), or "tracks." The visual focus is on the buttons and the reacting characters.
Custom SVG Character & Scene Generation:
NO JPEG IMAGES for scene elements. The provided JPEGs are for visual inspiration for the style only. You MUST create and render all characters and scene elements as scalable SVG vector graphics.
Character Art Style: All characters (people, animals, objects) must adhere to a clean, line-art style, similar to the "bandaged" or "mummy-like" figures of neal.fun.
New Characters: When new characters are introduced (e.g., a cat, a lobster, a "fat person"), you MUST create corresponding SVG representations for them in this style.
Character Grouping: Groups of characters (e.g., 5 people, 4 people) MUST be rendered as clustered/stacked groups within a single SVG, visually similar to the original neal.fun aesthetic, not as individual figures in a straight line.
No Trolley/Train/Track SVGs: Since there's no trolley, do not include SVGs for a train or tracks. The scene will be defined by the characters and minimal abstract elements if needed.
Detailed Animation & Impact Sequence (CRITICAL):
Initial State: The scene loads with all dilemma-relevant characters/objects, and the user's character (the one interacting with the buttons) correctly positioned.
User Choice & Button Animation: When a choice button is clicked:
The chosen button should visually animate (e.g., press down, light up).
A clear status text (e.g., "Activating mechanism...") appears.
Character Reaction Animation: After a brief delay (e.g., 1-2 seconds, simulating the consequence):
The characters/objects impacted by the user's choice (in their designated visual area) must animate to show their reaction (e.g., "sleeping zzz," "screaming effects," "meowing," or visually dissolve/get replaced by a "splatted" SVG version if "killed").
The characters/objects representing the alternative outcome (in their separate visual area) will animate to show their state of being "saved" or "unaffected."
Use small SVG text overlays (e.g., "Mom!", "Friend!") or speech bubbles with text to emphasize character identity/emotions.
Multi-Language Support (Frontend):
The application MUST support English and Arabic initially.
All displayable text (scenario descriptions, choice button labels, header titles, UI elements) should be localized.
Implement a language switcher (e.g., a simple button/dropdown in the header) to allow the user to toggle between English and Arabic.
Backend responses (e.g., scenario data) should be structured to support multiple languages or the frontend should handle localization.
User Personalization:
The user's character will be the central figure reacting to the dilemma.
Allow users to upload a profile image (placeholder for now) to represent their character. If no image is uploaded, use a default Male/Female/Non-Binary SVG character based on their selection. This image (or SVG) will be displayed prominently in the "User Profile" area.
Backend (Django + SQL):
Set up a Django project and application.
Define SQL models (using Drizzle ORM if preferred, but standard Django ORM is also fine for learning Django specifically) for:
Scenario: To store dilemma questions, choices, and links to relevant SVGs.
ChoiceResult: To store individual user choices for each dilemma (scenario ID, user choice, timestamp, and potentially user ID if implemented later).
GlobalStatistics: To store aggregated voting percentages for each choice in each scenario.
Implement API endpoints (using Django REST Framework or simple Django views returning JSON) for:
GET /api/scenario/<id>/: Retrieve specific dilemma data.
POST /api/choice/: Submit a user's choice for a dilemma.
GET /api/stats/<scenario_id>/: Retrieve aggregated percentages for a scenario.
Frontend (HTML, CSS, JavaScript, GSAP):
HTML, CSS, JS ONLY. (No React, Vue, TypeScript, or build tools like Vite/Webpack). This is for direct learning and fine-grained control.
Use GSAP (GreenSock Animation Platform) for all complex animations (trolley movement, character reactions, popping arrow). This will allow for smooth, professional-looking animations.
Use Fetch API for all communication with the Django backend.
Detailed UI Layout (Based on your provided mockup):
Overall Layout: Centered, main content area with distinct sections.
Top Header (Blue Box in Mockup):
Left (Logo): Text "BORAQ RAILWAY" (bold, sans-serif) in a styled box. This is the application's brand.
Center (Level Headline): "Level xyz : the headline of the level (like baby...)". This will dynamically display the dilemma's title/category (e.g., "The Complacent Bystander"). Use JustSquash font for the main headline part, Roboto-Medium for the subtitle.
Right (Profile/Donate):
"Profile Board" (text).
"Donate" button: A prominent button leading to a placeholder URL (e.g., https://www.paypal.com/donate/?hosted_button_id=YOUR_BUTTON_ID). This button MUST have a popping arrow animation (->) appear next to it every few levels (e.g., after 3-5 scenarios), then gently fade out after a few seconds. This is for user engagement without being annoying.
Scenario Text Area (Orange Box in Mockup):
This box will contain the main descriptive text of the dilemma.
CRITICAL: The actual choices will NOT be part of this text; they will be in the dedicated green button area below.
Choices & User Profile Area (Large Central Area with Green/Yellow/Pink borders):
"First choice" (Green box): This is the interactive button for the first choice. Visually, it should resemble the green "O" button from the Squid Game image (or a similar clear positive indicator). It will have the actual choice text.
"Second choice" (Green box): This is the interactive button for the second choice. Visually, it should resemble the red "X" button from the Squid Game image (or a similar clear negative indicator). It will have the actual choice text.
User Profile (Yellow box, central): Located directly between the "First choice" and "Second choice" buttons. This area will prominently display:
The user's uploaded profile image (if provided during setup) or a default Male/Female/Non-Binary SVG character based on their selection.
Illustration / Scene Area (Magenta/Cyan boxes):
This area visually represents the consequences of the choices. It will be divided (e.g., horizontally side-by-side or stacked vertically) to show the two outcomes.
Left (Magenta): "SVG image that depicts The targeted by the user choice preferably if its moving or in action: like sleeping zzz or screaming effects, meoing..." This section illustrates the consequence of the user's chosen action.
Characters here MUST be animated (e.g., struggling, relieved, screaming, sleeping, meowing, or "splatted" if impacted by the choice).
Right (Cyan): "SVG image that depicted The targeted by the choice the same here, the image in action like: chatacter open mouth, text to emphasize mom, friend, your put". This section illustrates the consequence of the alternative (not chosen) action.
Characters here MUST also be animated (e.g., happy, surprised, or remaining oblivious) to emphasize what was not chosen.
Small SVG text overlays or speech bubbles (e.g., "Mom!", "Friend!", "Your pet!") can be dynamically applied to characters to emphasize their identity or emotional state.
Statistics Area (Light Blue):
Displays voting statistics.
Donut chart (or pie chart) format showing percentages.
DO NOT display the total count of users/votes. Only percentages.
Complex Example Scenario for Replit to Implement (as a demonstration):
Implement this scenario fully to demonstrate all capabilities, including multi-language support (English and Arabic).
Scenario: "The Unseen Consequence"
ID: 1 (for backend linking)
Title (English): "The Unseen Consequence"
Title (Arabic): "العواقب الخفية" (Al-`Awāqib al-Khafīyah)
Problem Description (English): "A group of 5 innocent people are unknowingly trapped in a collapsing structure. You have two large buttons before you. Pressing the GREEN button will instantly save them, but it will also unleash a plague that will slowly affect 1 other innocent person elsewhere in the world, causing them prolonged suffering before death. Pressing the RED button does nothing, leaving the 5 people to die instantly, but saving the distant person from the plague."
Problem Description (Arabic): "مجموعة من 5 أشخاص أبرياء محاصرون في هيكل آيل للسقوط. أمامك زران كبيران. الضغط على الزر الأخضر سينقذهم فوراً، لكنه سيطلق وباءً يؤثر ببطء على شخص بريء آخر في مكان ما من العالم، مسبباً له معاناة طويلة قبل الموت. الضغط على الزر الأحمر لا يفعل شيئاً، مما يترك 5 أشخاص ليموتوا فوراً، لكنه ينقذ الشخص البعيد من الوباء."
Choice 1 Button Label (English): "Press GREEN (Save 5, Harm 1 Slowly)"
Choice 1 Button Label (Arabic): "اضغط الأخضر (أنقذ 5، اضرار 1 ببطء)" (Idghat al-Akhḍar: Anqidh 5, Idrār 1 bi-buṭ')
Choice 2 Button Label (English): "Press RED (5 Die, 1 Safe)"
Choice 2 Button Label (Arabic): "اضغط الأحمر (5 يموتون، 1 آمن)" (Idghat al-Aḥmar: 5 Yamūtūn, 1 Āmin)
Illustration Elements (SVGs to create by Replit):
button-green.svg (Round green button, like Squid Game 'O')
button-red.svg (Round red button, like Squid Game 'X')
five-people-trapped.svg (5 clustered, mummy-like people in a collapsing structure/cage, looking terrified/desperate.)
five-people-saved.svg (The same 5 people, but now free and looking relieved/happy.)
five-people-dead.svg (The same 5 people, but "splatted" or clearly deceased-looking.)
one-person-healthy.svg (1 single, mummy-like person, looking unaware or happy, representing the distant person.)
one-person-suffering.svg (The same single person, looking sickly/suffering, perhaps with abstract "pain" lines or faded color.)
one-person-safe.svg (The same single person, looking safe and clear.)
splat.svg (Re-use the general splat effect for death if needed for 5 people.)
Text SVGs: svg-text-relieved.svg (for 5 people), svg-text-pain.svg (for 1 person).
Animation Details (for "The Unseen Consequence" scenario):
Initial: Green and Red buttons are static. Left scene: five-people-trapped.svg. Right scene: one-person-healthy.svg.
On "Press GREEN" choice:
Green button animates (presses down).
Status text: "Activating mechanism..."
After 1.5 seconds: Left scene changes to five-people-saved.svg (perhaps with a subtle animation of the cage opening). Right scene changes to one-person-suffering.svg (fading to a sickly color or adding pain lines), and svg-text-pain.svg appears near them.
On "Press RED" choice:
Red button animates (presses down).
Status text: "Accepting fate..."
After 1.5 seconds: Left scene changes to five-people-dead.svg (with a "splat" effect if applicable). Right scene changes to one-person-safe.svg (perhaps with a subtle sigh of relief animation).
Donation Button (Persistent Feature):
Small, distinct "Donate 💖" button in the top-right header area.
Leads to a placeholder URL (e.g., PayPal).
A subtle, non-annoying CSS animation of a "popping arrow" (-> icon or similar) should appear next to the donate button every 3-5 completed scenarios, then gently fade out after a few seconds. This requires JavaScript to track scenarios and trigger the animation.
Final Request to Replit:
Build the "Moral Crossroads" project using the precise specifications above. Focus on implementing the complex "The Unseen Consequence" scenario as a full demonstration, including the creation of all described SVG characters, dynamic multi-language text, user profile image integration, accurate animations for choice and consequence, and full Django backend integration for data persistence. This is crucial for my learning.